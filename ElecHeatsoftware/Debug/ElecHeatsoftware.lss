
ElecHeatsoftware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000101e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001092  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800060  00800060  00001092  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001092  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000103e  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000866  00000000  00000000  0000224e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa5  00000000  00000000  00002ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  0000355c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c1  00000000  00000000  000037b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003bc  00000000  00000000  00003d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000412d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__vector_8>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	96 02       	muls	r25, r22
      56:	93 02       	muls	r25, r19
      58:	8d 02       	muls	r24, r29
      5a:	87 02       	muls	r24, r23
      5c:	81 02       	muls	r24, r17
      5e:	90 02       	muls	r25, r16
      60:	7e 02       	muls	r23, r30
      62:	84 02       	muls	r24, r20
      64:	8a 02       	muls	r24, r26
      66:	44 03       	mulsu	r20, r20
      68:	3b 03       	fmul	r19, r19
      6a:	29 03       	fmul	r18, r17
      6c:	17 03       	mulsu	r17, r23
      6e:	05 03       	mulsu	r16, r21
      70:	32 03       	mulsu	r19, r18
      72:	fc 02       	muls	r31, r28
      74:	0e 03       	fmul	r16, r22
      76:	20 03       	mulsu	r18, r16
      78:	07 63       	ori	r16, 0x37	; 55
      7a:	42 36       	cpi	r20, 0x62	; 98
      7c:	b7 9b       	sbis	0x16, 7	; 22
      7e:	d8 a7       	std	Y+40, r29	; 0x28
      80:	1a 39       	cpi	r17, 0x9A	; 154
      82:	68 56       	subi	r22, 0x68	; 104
      84:	18 ae       	std	Y+56, r1	; 0x38
      86:	ba ab       	std	Y+50, r27	; 0x32
      88:	55 8c       	ldd	r5, Z+29	; 0x1d
      8a:	1d 3c       	cpi	r17, 0xCD	; 205
      8c:	b7 cc       	rjmp	.-1682   	; 0xfffff9fc <__eeprom_end+0xff7ef9fc>
      8e:	57 63       	ori	r21, 0x37	; 55
      90:	bd 6d       	ori	r27, 0xDD	; 221
      92:	ed fd       	.word	0xfded	; ????
      94:	75 3e       	cpi	r23, 0xE5	; 229
      96:	f6 17       	cp	r31, r22
      98:	72 31       	cpi	r23, 0x12	; 18
      9a:	bf 00       	.word	0x00bf	; ????
      9c:	00 00       	nop
      9e:	80 3f       	cpi	r24, 0xF0	; 240
      a0:	08 00       	.word	0x0008	; ????
      a2:	00 00       	nop
      a4:	be 92       	st	-X, r11
      a6:	24 49       	sbci	r18, 0x94	; 148
      a8:	12 3e       	cpi	r17, 0xE2	; 226
      aa:	ab aa       	std	Y+51, r10	; 0x33
      ac:	aa 2a       	or	r10, r26
      ae:	be cd       	rjmp	.-1156   	; 0xfffffc2c <__eeprom_end+0xff7efc2c>
      b0:	cc cc       	rjmp	.-1640   	; 0xfffffa4a <__eeprom_end+0xff7efa4a>
      b2:	4c 3e       	cpi	r20, 0xEC	; 236
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	be ab       	std	Y+54, r27	; 0x36
      ba:	aa aa       	std	Y+50, r10	; 0x32
      bc:	aa 3e       	cpi	r26, 0xEA	; 234
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	bf 00       	.word	0x00bf	; ????
      c4:	00 00       	nop
      c6:	80 3f       	cpi	r24, 0xF0	; 240
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	00 08       	sbc	r0, r0
      ce:	41 78       	andi	r20, 0x81	; 129
      d0:	d3 bb       	out	0x13, r29	; 19
      d2:	43 87       	std	Z+11, r20	; 0x0b
      d4:	d1 13       	cpse	r29, r17
      d6:	3d 19       	sub	r19, r13
      d8:	0e 3c       	cpi	r16, 0xCE	; 206
      da:	c3 bd       	out	0x23, r28	; 35
      dc:	42 82       	std	Z+2, r4	; 0x02
      de:	ad 2b       	or	r26, r29
      e0:	3e 68       	ori	r19, 0x8E	; 142
      e2:	ec 82       	std	Y+4, r14	; 0x04
      e4:	76 be       	out	0x36, r7	; 54
      e6:	d9 8f       	std	Y+25, r29	; 0x19
      e8:	e1 a9       	ldd	r30, Z+49	; 0x31
      ea:	3e 4c       	sbci	r19, 0xCE	; 206
      ec:	80 ef       	ldi	r24, 0xF0	; 240
      ee:	ff be       	out	0x3f, r15	; 63
      f0:	01 c4       	rjmp	.+2050   	; 0x8f4 <__addsf3x+0x54>
      f2:	ff 7f       	andi	r31, 0xFF	; 255
      f4:	3f 00       	.word	0x003f	; ????
      f6:	00 00       	nop
	...

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf e5       	ldi	r28, 0x5F	; 95
     100:	d4 e0       	ldi	r29, 0x04	; 4
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_clear_bss>:
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	a0 e6       	ldi	r26, 0x60	; 96
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	aa 37       	cpi	r26, 0x7A	; 122
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 98 03 	call	0x730	; 0x730 <main>
     11a:	0c 94 0d 08 	jmp	0x101a	; 0x101a <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <ADC_init>:
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0x00;
     122:	17 b8       	out	0x07, r1	; 7
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<7) | (1<<1) | (1<<0);
     124:	83 e8       	ldi	r24, 0x83	; 131
     126:	86 b9       	out	0x06, r24	; 6
     128:	08 95       	ret

0000012a <ADC_readChannel>:
}

unsigned short ADC_readChannel(unsigned char channel_num)
{
	//channel_num &= 0x07; /* channel number must be from 0 --> 7 */
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     12a:	97 b1       	in	r25, 0x07	; 7
     12c:	90 7e       	andi	r25, 0xE0	; 224
     12e:	97 b9       	out	0x07, r25	; 7
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
     130:	97 b1       	in	r25, 0x07	; 7
     132:	89 2b       	or	r24, r25
     134:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,6); /* start conversion write '1' to ADSC */
     136:	86 b1       	in	r24, 0x06	; 6
     138:	80 64       	ori	r24, 0x40	; 64
     13a:	86 b9       	out	0x06, r24	; 6
	//ADCSRA |= (1<<ADSC);
	while(BIT_IS_CLEAR(ADCSRA,4)); /* wait for conversion to complete ADIF becomes '1' */
     13c:	34 9b       	sbis	0x06, 4	; 6
     13e:	fe cf       	rjmp	.-4      	; 0x13c <ADC_readChannel+0x12>
		SET_BIT(ADCSRA,4); /* clear ADIF by write '1' to it :) */
     140:	86 b1       	in	r24, 0x06	; 6
     142:	80 61       	ori	r24, 0x10	; 16
     144:	86 b9       	out	0x06, r24	; 6
	return ADC; /* return the data register */
     146:	84 b1       	in	r24, 0x04	; 4
     148:	95 b1       	in	r25, 0x05	; 5
	

}
     14a:	08 95       	ret

0000014c <DATA_DIRECTION_REGISTER>:
// turns a BCD-encoded byte back into a standard one
u8 Bcd_to_decimal (u8 value)
{
	value=TWDR;
	return( ((value>>4)*10)+(value &0xF));
}
     14c:	81 b3       	in	r24, 0x11	; 17
     14e:	81 60       	ori	r24, 0x01	; 1
     150:	81 bb       	out	0x11, r24	; 17
     152:	81 b3       	in	r24, 0x11	; 17
     154:	82 60       	ori	r24, 0x02	; 2
     156:	81 bb       	out	0x11, r24	; 17
     158:	81 b3       	in	r24, 0x11	; 17
     15a:	84 60       	ori	r24, 0x04	; 4
     15c:	81 bb       	out	0x11, r24	; 17
     15e:	81 b3       	in	r24, 0x11	; 17
     160:	88 60       	ori	r24, 0x08	; 8
     162:	81 bb       	out	0x11, r24	; 17
     164:	81 b3       	in	r24, 0x11	; 17
     166:	80 61       	ori	r24, 0x10	; 16
     168:	81 bb       	out	0x11, r24	; 17
     16a:	81 b3       	in	r24, 0x11	; 17
     16c:	80 62       	ori	r24, 0x20	; 32
     16e:	81 bb       	out	0x11, r24	; 17
     170:	81 b3       	in	r24, 0x11	; 17
     172:	80 64       	ori	r24, 0x40	; 64
     174:	81 bb       	out	0x11, r24	; 17
     176:	81 b3       	in	r24, 0x11	; 17
     178:	80 68       	ori	r24, 0x80	; 128
     17a:	81 bb       	out	0x11, r24	; 17
     17c:	87 b3       	in	r24, 0x17	; 23
     17e:	81 60       	ori	r24, 0x01	; 1
     180:	87 bb       	out	0x17, r24	; 23
     182:	87 b3       	in	r24, 0x17	; 23
     184:	80 68       	ori	r24, 0x80	; 128
     186:	87 bb       	out	0x17, r24	; 23
     188:	87 b3       	in	r24, 0x17	; 23
     18a:	80 62       	ori	r24, 0x20	; 32
     18c:	87 bb       	out	0x17, r24	; 23
     18e:	87 b3       	in	r24, 0x17	; 23
     190:	80 64       	ori	r24, 0x40	; 64
     192:	87 bb       	out	0x17, r24	; 23
     194:	87 b3       	in	r24, 0x17	; 23
     196:	80 61       	ori	r24, 0x10	; 16
     198:	87 bb       	out	0x17, r24	; 23
     19a:	87 b3       	in	r24, 0x17	; 23
     19c:	87 7f       	andi	r24, 0xF7	; 247
     19e:	87 bb       	out	0x17, r24	; 23
     1a0:	87 b3       	in	r24, 0x17	; 23
     1a2:	8b 7f       	andi	r24, 0xFB	; 251
     1a4:	87 bb       	out	0x17, r24	; 23
     1a6:	87 b3       	in	r24, 0x17	; 23
     1a8:	8d 7f       	andi	r24, 0xFD	; 253
     1aa:	87 bb       	out	0x17, r24	; 23
     1ac:	08 95       	ret

000001ae <Init_VARIABLES>:
     1ae:	82 b3       	in	r24, 0x12	; 18
     1b0:	8f 77       	andi	r24, 0x7F	; 127
     1b2:	82 bb       	out	0x12, r24	; 18
     1b4:	82 b3       	in	r24, 0x12	; 18
     1b6:	80 64       	ori	r24, 0x40	; 64
     1b8:	82 bb       	out	0x12, r24	; 18
     1ba:	82 b3       	in	r24, 0x12	; 18
     1bc:	80 62       	ori	r24, 0x20	; 32
     1be:	82 bb       	out	0x12, r24	; 18
     1c0:	82 b3       	in	r24, 0x12	; 18
     1c2:	8f 7e       	andi	r24, 0xEF	; 239
     1c4:	82 bb       	out	0x12, r24	; 18
     1c6:	82 b3       	in	r24, 0x12	; 18
     1c8:	87 7f       	andi	r24, 0xF7	; 247
     1ca:	82 bb       	out	0x12, r24	; 18
     1cc:	82 b3       	in	r24, 0x12	; 18
     1ce:	8b 7f       	andi	r24, 0xFB	; 251
     1d0:	82 bb       	out	0x12, r24	; 18
     1d2:	82 b3       	in	r24, 0x12	; 18
     1d4:	8d 7f       	andi	r24, 0xFD	; 253
     1d6:	82 bb       	out	0x12, r24	; 18
     1d8:	82 b3       	in	r24, 0x12	; 18
     1da:	8e 7f       	andi	r24, 0xFE	; 254
     1dc:	82 bb       	out	0x12, r24	; 18
     1de:	88 b3       	in	r24, 0x18	; 24
     1e0:	8f 7e       	andi	r24, 0xEF	; 239
     1e2:	88 bb       	out	0x18, r24	; 24
     1e4:	88 b3       	in	r24, 0x18	; 24
     1e6:	8f 7d       	andi	r24, 0xDF	; 223
     1e8:	88 bb       	out	0x18, r24	; 24
     1ea:	88 b3       	in	r24, 0x18	; 24
     1ec:	8f 7b       	andi	r24, 0xBF	; 191
     1ee:	88 bb       	out	0x18, r24	; 24
     1f0:	88 b3       	in	r24, 0x18	; 24
     1f2:	81 60       	ori	r24, 0x01	; 1
     1f4:	88 bb       	out	0x18, r24	; 24
     1f6:	88 b3       	in	r24, 0x18	; 24
     1f8:	80 68       	ori	r24, 0x80	; 128
     1fa:	88 bb       	out	0x18, r24	; 24
     1fc:	08 95       	ret

000001fe <I2C_Init>:
     1fe:	11 b8       	out	0x01, r1	; 1
     200:	61 b1       	in	r22, 0x01	; 1
     202:	63 70       	andi	r22, 0x03	; 3
     204:	70 e0       	ldi	r23, 0x00	; 0
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__floatsisf>
     20e:	9b 01       	movw	r18, r22
     210:	ac 01       	movw	r20, r24
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	80 e8       	ldi	r24, 0x80	; 128
     218:	90 e4       	ldi	r25, 0x40	; 64
     21a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <pow>
     21e:	9b 01       	movw	r18, r22
     220:	ac 01       	movw	r20, r24
     222:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
     226:	9b 01       	movw	r18, r22
     228:	ac 01       	movw	r20, r24
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	80 e8       	ldi	r24, 0x80	; 128
     230:	9f e4       	ldi	r25, 0x4F	; 79
     232:	0e 94 aa 04 	call	0x954	; 0x954 <__divsf3>
     236:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fixunssfsi>
     23a:	60 b9       	out	0x00, r22	; 0
     23c:	08 95       	ret

0000023e <I2C_Start>:
     23e:	94 ea       	ldi	r25, 0xA4	; 164
     240:	96 bf       	out	0x36, r25	; 54
     242:	06 b6       	in	r0, 0x36	; 54
     244:	07 fe       	sbrs	r0, 7
     246:	fd cf       	rjmp	.-6      	; 0x242 <I2C_Start+0x4>
     248:	83 b9       	out	0x03, r24	; 3
     24a:	84 e8       	ldi	r24, 0x84	; 132
     24c:	86 bf       	out	0x36, r24	; 54
     24e:	06 b6       	in	r0, 0x36	; 54
     250:	07 fe       	sbrs	r0, 7
     252:	fd cf       	rjmp	.-6      	; 0x24e <I2C_Start+0x10>
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	08 95       	ret

00000258 <I2C_Repeated_Start>:
     258:	94 ea       	ldi	r25, 0xA4	; 164
     25a:	96 bf       	out	0x36, r25	; 54
     25c:	06 b6       	in	r0, 0x36	; 54
     25e:	07 fe       	sbrs	r0, 7
     260:	fd cf       	rjmp	.-6      	; 0x25c <I2C_Repeated_Start+0x4>
     262:	83 b9       	out	0x03, r24	; 3
     264:	84 e8       	ldi	r24, 0x84	; 132
     266:	86 bf       	out	0x36, r24	; 54
     268:	06 b6       	in	r0, 0x36	; 54
     26a:	07 fe       	sbrs	r0, 7
     26c:	fd cf       	rjmp	.-6      	; 0x268 <I2C_Repeated_Start+0x10>
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	08 95       	ret

00000272 <I2C_Read_Nack>:
     272:	84 e8       	ldi	r24, 0x84	; 132
     274:	86 bf       	out	0x36, r24	; 54
     276:	06 b6       	in	r0, 0x36	; 54
     278:	07 fe       	sbrs	r0, 7
     27a:	fd cf       	rjmp	.-6      	; 0x276 <I2C_Read_Nack+0x4>
     27c:	83 b1       	in	r24, 0x03	; 3
     27e:	08 95       	ret

00000280 <I2C_Stop>:
     280:	84 e9       	ldi	r24, 0x94	; 148
     282:	86 bf       	out	0x36, r24	; 54
     284:	86 b7       	in	r24, 0x36	; 54
     286:	08 95       	ret

00000288 <decimal_to_bcd>:
     288:	9d ec       	ldi	r25, 0xCD	; 205
     28a:	89 9f       	mul	r24, r25
     28c:	91 2d       	mov	r25, r1
     28e:	11 24       	eor	r1, r1
     290:	96 95       	lsr	r25
     292:	96 95       	lsr	r25
     294:	96 95       	lsr	r25
     296:	39 2f       	mov	r19, r25
     298:	33 0f       	add	r19, r19
     29a:	23 2f       	mov	r18, r19
     29c:	22 0f       	add	r18, r18
     29e:	22 0f       	add	r18, r18
     2a0:	23 0f       	add	r18, r19
     2a2:	82 1b       	sub	r24, r18
     2a4:	30 e1       	ldi	r19, 0x10	; 16
     2a6:	93 9f       	mul	r25, r19
     2a8:	80 0d       	add	r24, r0
     2aa:	11 24       	eor	r1, r1
     2ac:	08 95       	ret

000002ae <I2C_Write>:
     2ae:	0e 94 44 01 	call	0x288	; 0x288 <decimal_to_bcd>
     2b2:	83 b9       	out	0x03, r24	; 3
     2b4:	84 e8       	ldi	r24, 0x84	; 132
     2b6:	86 bf       	out	0x36, r24	; 54
     2b8:	06 b6       	in	r0, 0x36	; 54
     2ba:	07 fe       	sbrs	r0, 7
     2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <I2C_Write+0xa>
     2be:	08 95       	ret

000002c0 <EEPROM_write_read>:

u8 EEPROM_write_read(u8 stored_data)
{
     2c0:	cf 93       	push	r28
     2c2:	c8 2f       	mov	r28, r24
	u8 data;
	I2C_Init();
     2c4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Init>
	I2C_Start(0xA0);
     2c8:	80 ea       	ldi	r24, 0xA0	; 160
     2ca:	0e 94 1f 01 	call	0x23e	; 0x23e <I2C_Start>
	I2C_Write(stored_data);
     2ce:	8c 2f       	mov	r24, r28
     2d0:	0e 94 57 01 	call	0x2ae	; 0x2ae <I2C_Write>
	I2C_Repeated_Start(0xA1);
     2d4:	81 ea       	ldi	r24, 0xA1	; 161
     2d6:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_Repeated_Start>
	data=I2C_Read_Nack ();
     2da:	0e 94 39 01 	call	0x272	; 0x272 <I2C_Read_Nack>
     2de:	c8 2f       	mov	r28, r24
	I2C_Stop();
     2e0:	0e 94 40 01 	call	0x280	; 0x280 <I2C_Stop>
	return data;
	
}
     2e4:	8c 2f       	mov	r24, r28
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <INT_interrupt>:



void INT_interrupt (void)
{
	TCNT1 = 65380;   // for 100 ms at 16 MHz  in Bin "1111 1111 0110 0100" , in Hexa_decimal "FF64" 
     2ea:	84 e6       	ldi	r24, 0x64	; 100
     2ec:	9f ef       	ldi	r25, 0xFF	; 255
     2ee:	9d bd       	out	0x2d, r25	; 45
     2f0:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00;
     2f2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<CS10) | (1<<CS12);;  // Timer mode with 1024 pre_scaler
     2f4:	85 e0       	ldi	r24, 0x05	; 5
     2f6:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
     2f8:	84 e0       	ldi	r24, 0x04	; 4
     2fa:	89 bf       	out	0x39, r24	; 57
	sei();        // Enable global interrupts by setting global interrupt enable bit in SREG
     2fc:	78 94       	sei
     2fe:	08 95       	ret

00000300 <Avg_reading>:


void Avg_reading(void)
{
	
	sum=sum+x;
     300:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <x>
     304:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <x+0x1>
     308:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <x+0x2>
     30c:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <x+0x3>
     310:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <sum>
     314:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <sum+0x1>
     318:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <sum+0x2>
     31c:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <sum+0x3>
     320:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
     324:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <sum>
     328:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <sum+0x1>
     32c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <sum+0x2>
     330:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <sum+0x3>
	i++;
     334:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <i>
     338:	2f 5f       	subi	r18, 0xFF	; 255
     33a:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <i>
	if(i==9)
     33e:	29 30       	cpi	r18, 0x09	; 9
     340:	c1 f4       	brne	.+48     	; 0x372 <Avg_reading+0x72>
	{
		average=(sum)/9.105;  //In testing and validation ,calibration 9.1125
     342:	24 e1       	ldi	r18, 0x14	; 20
     344:	3e ea       	ldi	r19, 0xAE	; 174
     346:	41 e1       	ldi	r20, 0x11	; 17
     348:	51 e4       	ldi	r21, 0x41	; 65
     34a:	0e 94 aa 04 	call	0x954	; 0x954 <__divsf3>
     34e:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <average>
     352:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <average+0x1>
     356:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <average+0x2>
     35a:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <average+0x3>
		i=0;
     35e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <i>
		sum=0;
     362:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <sum>
     366:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <sum+0x1>
     36a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <sum+0x2>
     36e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <sum+0x3>
     372:	08 95       	ret

00000374 <Temperature_reading>:



void Temperature_reading(void)
{
	volt = ADC_readChannel(0); // read channel two where the temp sensor is connect
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 95 00 	call	0x12a	; 0x12a <ADC_readChannel>
     37a:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <volt+0x1>
     37e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <volt>
	x=(float)(5*volt)/1023; // to gain the ADC of temperature reading
     382:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <volt>
     386:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <volt+0x1>
     38a:	cb 01       	movw	r24, r22
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	68 0f       	add	r22, r24
     396:	79 1f       	adc	r23, r25
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 4b 05 	call	0xa96	; 0xa96 <__floatunsisf>
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 ec       	ldi	r19, 0xC0	; 192
     3a4:	4f e7       	ldi	r20, 0x7F	; 127
     3a6:	54 e4       	ldi	r21, 0x44	; 68
     3a8:	0e 94 aa 04 	call	0x954	; 0x954 <__divsf3>
     3ac:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <x>
     3b0:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <x+0x1>
     3b4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <x+0x2>
     3b8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <x+0x3>
	x=x*100;   //the reading of temperature
     3bc:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <x>
     3c0:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <x+0x1>
     3c4:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <x+0x2>
     3c8:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <x+0x3>
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	48 ec       	ldi	r20, 0xC8	; 200
     3d2:	52 e4       	ldi	r21, 0x42	; 66
     3d4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
     3d8:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <x>
     3dc:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <x+0x1>
     3e0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <x+0x2>
     3e4:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <x+0x3>
	Avg_reading();  //the equations of average 10 temperature reading	
     3e8:	0e 94 80 01 	call	0x300	; 0x300 <Avg_reading>
     3ec:	08 95       	ret

000003ee <__vector_8>:
#ifndef INTERRUPT_H
#define INTERRUPT_H 
void Temperature_reading(void); 
#endif
ISR (TIMER1_OVF_vect)    // Timer1 ISR
{
     3ee:	1f 92       	push	r1
     3f0:	0f 92       	push	r0
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	0f 92       	push	r0
     3f6:	11 24       	eor	r1, r1
     3f8:	2f 93       	push	r18
     3fa:	3f 93       	push	r19
     3fc:	4f 93       	push	r20
     3fe:	5f 93       	push	r21
     400:	6f 93       	push	r22
     402:	7f 93       	push	r23
     404:	8f 93       	push	r24
     406:	9f 93       	push	r25
     408:	af 93       	push	r26
     40a:	bf 93       	push	r27
     40c:	ef 93       	push	r30
     40e:	ff 93       	push	r31
	TCNT1 = 65380;  // for 100 ms at 16 MHz  in Bin "1111 1111 0110 0100" , in Hexa_decimal "FF64"
     410:	84 e6       	ldi	r24, 0x64	; 100
     412:	9f ef       	ldi	r25, 0xFF	; 255
     414:	9d bd       	out	0x2d, r25	; 45
     416:	8c bd       	out	0x2c, r24	; 44
		Temperature_reading();  //read temperature each 100 ms 
     418:	0e 94 ba 01 	call	0x374	; 0x374 <Temperature_reading>
	
		}
     41c:	ff 91       	pop	r31
     41e:	ef 91       	pop	r30
     420:	bf 91       	pop	r27
     422:	af 91       	pop	r26
     424:	9f 91       	pop	r25
     426:	8f 91       	pop	r24
     428:	7f 91       	pop	r23
     42a:	6f 91       	pop	r22
     42c:	5f 91       	pop	r21
     42e:	4f 91       	pop	r20
     430:	3f 91       	pop	r19
     432:	2f 91       	pop	r18
     434:	0f 90       	pop	r0
     436:	0f be       	out	0x3f, r0	; 63
     438:	0f 90       	pop	r0
     43a:	1f 90       	pop	r1
     43c:	18 95       	reti

0000043e <setting_temp>:

void setting_temp(void)

{
	
	if(PINB&(1<<3)&&counter<3 )
     43e:	b3 9b       	sbis	0x16, 3	; 22
     440:	1d c0       	rjmp	.+58     	; 0x47c <__stack+0x1d>
     442:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter>
     446:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <counter+0x1>
     44a:	83 30       	cpi	r24, 0x03	; 3
     44c:	91 05       	cpc	r25, r1
     44e:	b4 f4       	brge	.+44     	; 0x47c <__stack+0x1d>
	{
		counter++;
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <counter+0x1>
     456:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <counter>
		counter_for_Timer=0;
     45a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     45e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     462:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     466:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     46a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     46e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     472:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     476:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
     47a:	34 c0       	rjmp	.+104    	; 0x4e4 <__stack+0x85>
	}
	else if(PINB&(1<<2)&&counter>-5)
     47c:	b2 9b       	sbis	0x16, 2	; 22
     47e:	1e c0       	rjmp	.+60     	; 0x4bc <__stack+0x5d>
     480:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter>
     484:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <counter+0x1>
     488:	8c 3f       	cpi	r24, 0xFC	; 252
     48a:	2f ef       	ldi	r18, 0xFF	; 255
     48c:	92 07       	cpc	r25, r18
     48e:	b4 f0       	brlt	.+44     	; 0x4bc <__stack+0x5d>
	{
		counter--;
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <counter+0x1>
     496:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <counter>
		counter_for_Timer=0;
     49a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     49e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4a2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     4a6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     4aa:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     4ae:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     4b2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     4b6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
     4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <__stack+0x85>
	}
	
	else if (PINB&(1<<3) || PINB&(1<<2))
     4bc:	b3 99       	sbic	0x16, 3	; 22
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__stack+0x65>
     4c0:	b2 9b       	sbis	0x16, 2	; 22
     4c2:	10 c0       	rjmp	.+32     	; 0x4e4 <__stack+0x85>
	{
		counter_for_Timer=0;
     4c4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     4c8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4cc:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     4d0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     4d4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     4d8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     4dc:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     4e0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
	}
	switch(counter)
     4e4:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <counter>
     4e8:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <counter+0x1>
     4ec:	35 96       	adiw	r30, 0x05	; 5
     4ee:	e9 30       	cpi	r30, 0x09	; 9
     4f0:	f1 05       	cpc	r31, r1
     4f2:	f0 f4       	brcc	.+60     	; 0x530 <__stack+0xd1>
     4f4:	e6 5d       	subi	r30, 0xD6	; 214
     4f6:	ff 4f       	sbci	r31, 0xFF	; 255
     4f8:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__tablejump2__>
	{
		case 1:
		PORTD=0x65;
     4fc:	85 e6       	ldi	r24, 0x65	; 101
     4fe:	82 bb       	out	0x12, r24	; 18
		break;
     500:	17 c0       	rjmp	.+46     	; 0x530 <__stack+0xd1>
		case -1:
		PORTD=0x55;
     502:	85 e5       	ldi	r24, 0x55	; 85
     504:	82 bb       	out	0x12, r24	; 18
		break;
     506:	14 c0       	rjmp	.+40     	; 0x530 <__stack+0xd1>
		case 2:
		PORTD=0x70;
     508:	80 e7       	ldi	r24, 0x70	; 112
     50a:	82 bb       	out	0x12, r24	; 18
		break;
     50c:	11 c0       	rjmp	.+34     	; 0x530 <__stack+0xd1>
		case -2:
		PORTD=0x50;
     50e:	80 e5       	ldi	r24, 0x50	; 80
     510:	82 bb       	out	0x12, r24	; 18
		break;
     512:	0e c0       	rjmp	.+28     	; 0x530 <__stack+0xd1>
		case 3:
		PORTD=0x75;
     514:	85 e7       	ldi	r24, 0x75	; 117
     516:	82 bb       	out	0x12, r24	; 18
		break;
     518:	0b c0       	rjmp	.+22     	; 0x530 <__stack+0xd1>
		case -3:
		PORTD=0x45;
     51a:	85 e4       	ldi	r24, 0x45	; 69
     51c:	82 bb       	out	0x12, r24	; 18
		break;
     51e:	08 c0       	rjmp	.+16     	; 0x530 <__stack+0xd1>
		case 0:
		PORTD=0x60;
     520:	80 e6       	ldi	r24, 0x60	; 96
     522:	82 bb       	out	0x12, r24	; 18
		break;
     524:	05 c0       	rjmp	.+10     	; 0x530 <__stack+0xd1>
		case -4:
		PORTD=0x40;
     526:	80 e4       	ldi	r24, 0x40	; 64
     528:	82 bb       	out	0x12, r24	; 18
		break;
     52a:	02 c0       	rjmp	.+4      	; 0x530 <__stack+0xd1>
		case -5:
		PORTD=0x35;
     52c:	85 e3       	ldi	r24, 0x35	; 53
     52e:	82 bb       	out	0x12, r24	; 18
		break;
	}
	
	EEPROM_write_read(counter);   // store value of counter to read it in EEPROM
     530:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter>
     534:	0e 94 60 01 	call	0x2c0	; 0x2c0 <EEPROM_write_read>
     538:	08 95       	ret

0000053a <ACTIVATION>:
	}
	
}

void ACTIVATION(uint16 value,u8 max, u8 min)
{
     53a:	cf 92       	push	r12
     53c:	df 92       	push	r13
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	cf 93       	push	r28
	if(counter == value)
     544:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <counter>
     548:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <counter+0x1>
     54c:	28 17       	cp	r18, r24
     54e:	39 07       	cpc	r19, r25
     550:	09 f0       	breq	.+2      	; 0x554 <ACTIVATION+0x1a>
     552:	3f c0       	rjmp	.+126    	; 0x5d2 <ACTIVATION+0x98>
     554:	c4 2f       	mov	r28, r20
	{
		if(average>=max)
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__floatsisf>
     560:	c0 90 70 00 	lds	r12, 0x0070	; 0x800070 <average>
     564:	d0 90 71 00 	lds	r13, 0x0071	; 0x800071 <average+0x1>
     568:	e0 90 72 00 	lds	r14, 0x0072	; 0x800072 <average+0x2>
     56c:	f0 90 73 00 	lds	r15, 0x0073	; 0x800073 <average+0x3>
     570:	a7 01       	movw	r20, r14
     572:	96 01       	movw	r18, r12
     574:	0e 94 a5 04 	call	0x94a	; 0x94a <__cmpsf2>
     578:	18 16       	cp	r1, r24
     57a:	54 f0       	brlt	.+20     	; 0x590 <ACTIVATION+0x56>
		{
			OUTPUT_MODULE_ON(PORTB,5);  //cooling element activate
     57c:	88 b3       	in	r24, 0x18	; 24
     57e:	80 62       	ori	r24, 0x20	; 32
     580:	88 bb       	out	0x18, r24	; 24
			OUTPUT_MODULE_OFF(PORTB,6);  //Heating element disactivate
     582:	88 b3       	in	r24, 0x18	; 24
     584:	8f 7b       	andi	r24, 0xBF	; 191
     586:	88 bb       	out	0x18, r24	; 24
			OUTPUT_MODULE_ON(PORTB,4); //LED
     588:	88 b3       	in	r24, 0x18	; 24
     58a:	80 61       	ori	r24, 0x10	; 16
     58c:	88 bb       	out	0x18, r24	; 24
     58e:	21 c0       	rjmp	.+66     	; 0x5d2 <ACTIVATION+0x98>
		}
		else if(average<=min)
     590:	6c 2f       	mov	r22, r28
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__floatsisf>
     59c:	9b 01       	movw	r18, r22
     59e:	ac 01       	movw	r20, r24
     5a0:	c7 01       	movw	r24, r14
     5a2:	b6 01       	movw	r22, r12
     5a4:	0e 94 a5 04 	call	0x94a	; 0x94a <__cmpsf2>
     5a8:	18 16       	cp	r1, r24
     5aa:	9c f0       	brlt	.+38     	; 0x5d2 <ACTIVATION+0x98>
		{
			OUTPUT_MODULE_OFF(PORTB,5);  //cooling element disactivate
     5ac:	88 b3       	in	r24, 0x18	; 24
     5ae:	8f 7d       	andi	r24, 0xDF	; 223
     5b0:	88 bb       	out	0x18, r24	; 24
			OUTPUT_MODULE_ON(PORTB,6);  //Heating element activate
     5b2:	88 b3       	in	r24, 0x18	; 24
     5b4:	80 64       	ori	r24, 0x40	; 64
     5b6:	88 bb       	out	0x18, r24	; 24
			TOGGLe_BIT(PORTB,4);
     5b8:	98 b3       	in	r25, 0x18	; 24
     5ba:	80 e1       	ldi	r24, 0x10	; 16
     5bc:	89 27       	eor	r24, r25
     5be:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c0:	2f ed       	ldi	r18, 0xDF	; 223
     5c2:	82 e2       	ldi	r24, 0x22	; 34
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	80 40       	sbci	r24, 0x00	; 0
     5ca:	90 40       	sbci	r25, 0x00	; 0
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <ACTIVATION+0x8c>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <ACTIVATION+0x96>
     5d0:	00 00       	nop
			
			
		}
	}
	
}
     5d2:	cf 91       	pop	r28
     5d4:	ff 90       	pop	r15
     5d6:	ef 90       	pop	r14
     5d8:	df 90       	pop	r13
     5da:	cf 90       	pop	r12
     5dc:	08 95       	ret

000005de <ELEMENTS>:

void ELEMENTS (void)
{

	{
		switch(counter)
     5de:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <counter>
     5e2:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <counter+0x1>
     5e6:	35 96       	adiw	r30, 0x05	; 5
     5e8:	e9 30       	cpi	r30, 0x09	; 9
     5ea:	f1 05       	cpc	r31, r1
     5ec:	08 f0       	brcs	.+2      	; 0x5f0 <ELEMENTS+0x12>
     5ee:	54 c0       	rjmp	.+168    	; 0x698 <ELEMENTS+0xba>
     5f0:	ed 5c       	subi	r30, 0xCD	; 205
     5f2:	ff 4f       	sbci	r31, 0xFF	; 255
     5f4:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__tablejump2__>
		{
			case 1:
			ACTIVATION(1,70,60);
     5f8:	4c e3       	ldi	r20, 0x3C	; 60
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	66 e4       	ldi	r22, 0x46	; 70
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 9d 02 	call	0x53a	; 0x53a <ACTIVATION>
			break;
     608:	08 95       	ret
			case -1:
			ACTIVATION(-1,60,50);
     60a:	42 e3       	ldi	r20, 0x32	; 50
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	6c e3       	ldi	r22, 0x3C	; 60
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	9f ef       	ldi	r25, 0xFF	; 255
     616:	0e 94 9d 02 	call	0x53a	; 0x53a <ACTIVATION>
			break;
     61a:	08 95       	ret
			case 2:
			ACTIVATION(2,75,65);
     61c:	41 e4       	ldi	r20, 0x41	; 65
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	6b e4       	ldi	r22, 0x4B	; 75
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 9d 02 	call	0x53a	; 0x53a <ACTIVATION>
			break;
     62c:	08 95       	ret
			case -2:
			ACTIVATION(-2,55,45);
     62e:	4d e2       	ldi	r20, 0x2D	; 45
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	67 e3       	ldi	r22, 0x37	; 55
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	8e ef       	ldi	r24, 0xFE	; 254
     638:	9f ef       	ldi	r25, 0xFF	; 255
     63a:	0e 94 9d 02 	call	0x53a	; 0x53a <ACTIVATION>
			break;
     63e:	08 95       	ret
			case 3:
			ACTIVATION(3,80,70);
     640:	46 e4       	ldi	r20, 0x46	; 70
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	60 e5       	ldi	r22, 0x50	; 80
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 9d 02 	call	0x53a	; 0x53a <ACTIVATION>
			break;
     650:	08 95       	ret
			case -3:
			ACTIVATION(-3,50,40);
     652:	48 e2       	ldi	r20, 0x28	; 40
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	62 e3       	ldi	r22, 0x32	; 50
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	8d ef       	ldi	r24, 0xFD	; 253
     65c:	9f ef       	ldi	r25, 0xFF	; 255
     65e:	0e 94 9d 02 	call	0x53a	; 0x53a <ACTIVATION>
			break;
     662:	08 95       	ret
			case 0:
			ACTIVATION(0,65,55);
     664:	47 e3       	ldi	r20, 0x37	; 55
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	61 e4       	ldi	r22, 0x41	; 65
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 9d 02 	call	0x53a	; 0x53a <ACTIVATION>
			break;
     674:	08 95       	ret
			case -4:
			ACTIVATION(-4,45,35);
     676:	43 e2       	ldi	r20, 0x23	; 35
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	6d e2       	ldi	r22, 0x2D	; 45
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	8c ef       	ldi	r24, 0xFC	; 252
     680:	9f ef       	ldi	r25, 0xFF	; 255
     682:	0e 94 9d 02 	call	0x53a	; 0x53a <ACTIVATION>
			break;
     686:	08 95       	ret
			case -5:
			ACTIVATION(-5,40,30);
     688:	4e e1       	ldi	r20, 0x1E	; 30
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	68 e2       	ldi	r22, 0x28	; 40
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	8b ef       	ldi	r24, 0xFB	; 251
     692:	9f ef       	ldi	r25, 0xFF	; 255
     694:	0e 94 9d 02 	call	0x53a	; 0x53a <ACTIVATION>
     698:	08 95       	ret

0000069a <on_off_7_segment>:
	
	
}
void on_off_7_segment(u8 Mode)
{
	if(Mode==1)
     69a:	81 30       	cpi	r24, 0x01	; 1
     69c:	39 f4       	brne	.+14     	; 0x6ac <on_off_7_segment+0x12>
	{
		OUTPUT_MODULE_OFF(PORTB,0);
     69e:	88 b3       	in	r24, 0x18	; 24
     6a0:	8e 7f       	andi	r24, 0xFE	; 254
     6a2:	88 bb       	out	0x18, r24	; 24
		OUTPUT_MODULE_OFF(PORTB,7);
     6a4:	88 b3       	in	r24, 0x18	; 24
     6a6:	8f 77       	andi	r24, 0x7F	; 127
     6a8:	88 bb       	out	0x18, r24	; 24
     6aa:	08 95       	ret
	}
	else if(Mode==0)
     6ac:	81 11       	cpse	r24, r1
     6ae:	06 c0       	rjmp	.+12     	; 0x6bc <on_off_7_segment+0x22>
	{
		OUTPUT_MODULE_ON(PORTB,0);
     6b0:	88 b3       	in	r24, 0x18	; 24
     6b2:	81 60       	ori	r24, 0x01	; 1
     6b4:	88 bb       	out	0x18, r24	; 24
		OUTPUT_MODULE_ON(PORTB,7);
     6b6:	88 b3       	in	r24, 0x18	; 24
     6b8:	80 68       	ori	r24, 0x80	; 128
     6ba:	88 bb       	out	0x18, r24	; 24
     6bc:	08 95       	ret

000006be <current_water_temperature>:
}


void current_water_temperature(void)
{
	on_off_7_segment(1);
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 4d 03 	call	0x69a	; 0x69a <on_off_7_segment>
	PORTD=decimal_to_bcd(x);
     6c6:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <x>
     6ca:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <x+0x1>
     6ce:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <x+0x2>
     6d2:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <x+0x3>
     6d6:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fixunssfsi>
     6da:	86 2f       	mov	r24, r22
     6dc:	0e 94 44 01 	call	0x288	; 0x288 <decimal_to_bcd>
     6e0:	82 bb       	out	0x12, r24	; 18
     6e2:	08 95       	ret

000006e4 <OFF_MODE>:


void OFF_MODE(void)
{

	OUTPUT_MODULE_OFF(PORTB,5);  //cooling element activate
     6e4:	88 b3       	in	r24, 0x18	; 24
     6e6:	8f 7d       	andi	r24, 0xDF	; 223
     6e8:	88 bb       	out	0x18, r24	; 24
	OUTPUT_MODULE_OFF(PORTB,6);  //Heating element disactivate
     6ea:	88 b3       	in	r24, 0x18	; 24
     6ec:	8f 7b       	andi	r24, 0xBF	; 191
     6ee:	88 bb       	out	0x18, r24	; 24
	OUTPUT_MODULE_OFF(PORTB,4); //LED
     6f0:	88 b3       	in	r24, 0x18	; 24
     6f2:	8f 7e       	andi	r24, 0xEF	; 239
     6f4:	88 bb       	out	0x18, r24	; 24
	on_off_7_segment(0);
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	0e 94 4d 03 	call	0x69a	; 0x69a <on_off_7_segment>
     6fc:	08 95       	ret

000006fe <on_off_mode>:
}

void on_off_mode(void)
{
	
	if(INPUT_BIT(PINB,1) && flag==0)
     6fe:	b1 9b       	sbis	0x16, 1	; 22
     700:	0a c0       	rjmp	.+20     	; 0x716 <on_off_mode+0x18>
     702:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flag>
     706:	81 11       	cpse	r24, r1
     708:	06 c0       	rjmp	.+12     	; 0x716 <on_off_mode+0x18>
	{
	
		flag=1;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <flag>
		while(INPUT_BIT(PINB,1));
     710:	b1 99       	sbic	0x16, 1	; 22
     712:	fe cf       	rjmp	.-4      	; 0x710 <on_off_mode+0x12>
     714:	08 95       	ret
	}
	else if(INPUT_BIT(PINB,1) && flag==1)
     716:	b1 9b       	sbis	0x16, 1	; 22
     718:	0a c0       	rjmp	.+20     	; 0x72e <on_off_mode+0x30>
     71a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flag>
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	31 f4       	brne	.+12     	; 0x72e <on_off_mode+0x30>
	{
		while(INPUT_BIT(PINB,1));
     722:	b1 99       	sbic	0x16, 1	; 22
     724:	fe cf       	rjmp	.-4      	; 0x722 <on_off_mode+0x24>
		
		flag=0;
     726:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <flag>
		OFF_MODE();
     72a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <OFF_MODE>
     72e:	08 95       	ret

00000730 <main>:



int main(void)
{
	DATA_DIRECTION_REGISTER();
     730:	0e 94 a6 00 	call	0x14c	; 0x14c <DATA_DIRECTION_REGISTER>
INT_interrupt();
     734:	0e 94 75 01 	call	0x2ea	; 0x2ea <INT_interrupt>
ADC_init();
     738:	0e 94 91 00 	call	0x122	; 0x122 <ADC_init>
Init_VARIABLES();
     73c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Init_VARIABLES>
    /* Replace with your application code */
    while (1) 
    {
		on_off_mode();
     740:	0e 94 7f 03 	call	0x6fe	; 0x6fe <on_off_mode>
		while(flag==1)
     744:	8f c0       	rjmp	.+286    	; 0x864 <main+0x134>
		{
			
			current_water_temperature();
     746:	0e 94 5f 03 	call	0x6be	; 0x6be <current_water_temperature>
			ELEMENTS();
     74a:	0e 94 ef 02 	call	0x5de	; 0x5de <ELEMENTS>
			on_off_mode();
     74e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <on_off_mode>
			if(((INPUT_BIT(PINB,3) || INPUT_BIT(PINB,2))))
     752:	b3 99       	sbic	0x16, 3	; 22
     754:	5d c0       	rjmp	.+186    	; 0x810 <main+0xe0>
     756:	b2 99       	sbic	0x16, 2	; 22
     758:	5b c0       	rjmp	.+182    	; 0x810 <main+0xe0>
     75a:	84 c0       	rjmp	.+264    	; 0x864 <main+0x134>
			{
				
				while( counter_for_Timer<10 &&flag==1 ) //In testing and validation ,calibration
				{
					on_off_7_segment(1);
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 4d 03 	call	0x69a	; 0x69a <on_off_7_segment>
					setting_temp();
     764:	0e 94 1f 02 	call	0x43e	; 0x43e <setting_temp>
					ELEMENTS();
     768:	0e 94 ef 02 	call	0x5de	; 0x5de <ELEMENTS>
					on_off_mode();
     76c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <on_off_mode>
					counter_for_Timer++;
     770:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     774:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     778:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     77c:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     780:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     784:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     788:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     78c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
     790:	a1 e0       	ldi	r26, 0x01	; 1
     792:	0e 94 f5 07 	call	0xfea	; 0xfea <__adddi3_s8>
     796:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
     79a:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     79e:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     7a2:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     7a6:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     7aa:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     7ae:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     7b2:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
					on_off_7_segment(0);
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 4d 03 	call	0x69a	; 0x69a <on_off_7_segment>
					setting_temp();
     7be:	0e 94 1f 02 	call	0x43e	; 0x43e <setting_temp>
					ELEMENTS();
     7c2:	0e 94 ef 02 	call	0x5de	; 0x5de <ELEMENTS>
					on_off_mode();
     7c6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <on_off_mode>
					counter_for_Timer++;
     7ca:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7ce:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     7d2:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     7d6:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     7da:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     7de:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     7e2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     7e6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
     7ea:	a1 e0       	ldi	r26, 0x01	; 1
     7ec:	0e 94 f5 07 	call	0xfea	; 0xfea <__adddi3_s8>
     7f0:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
     7f4:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     7f8:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     7fc:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     800:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     804:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     808:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     80c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
			ELEMENTS();
			on_off_mode();
			if(((INPUT_BIT(PINB,3) || INPUT_BIT(PINB,2))))
			{
				
				while( counter_for_Timer<10 &&flag==1 ) //In testing and validation ,calibration
     810:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     814:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     818:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     81c:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     820:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     824:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     828:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     82c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
     830:	a9 e0       	ldi	r26, 0x09	; 9
     832:	0e 94 01 08 	call	0x1002	; 0x1002 <__cmpdi2_s8>
     836:	09 f0       	breq	.+2      	; 0x83a <main+0x10a>
     838:	2c f4       	brge	.+10     	; 0x844 <main+0x114>
     83a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flag>
     83e:	81 30       	cpi	r24, 0x01	; 1
     840:	09 f4       	brne	.+2      	; 0x844 <main+0x114>
     842:	8c cf       	rjmp	.-232    	; 0x75c <main+0x2c>
					counter_for_Timer++;
					
					
					
				}
				counter_for_Timer=0;
     844:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     848:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     84c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     850:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     854:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     858:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
     85c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
     860:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
Init_VARIABLES();
    /* Replace with your application code */
    while (1) 
    {
		on_off_mode();
		while(flag==1)
     864:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flag>
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	09 f4       	brne	.+2      	; 0x86e <main+0x13e>
     86c:	6c cf       	rjmp	.-296    	; 0x746 <main+0x16>
     86e:	68 cf       	rjmp	.-304    	; 0x740 <main+0x10>

00000870 <__subsf3>:
     870:	50 58       	subi	r21, 0x80	; 128

00000872 <__addsf3>:
     872:	bb 27       	eor	r27, r27
     874:	aa 27       	eor	r26, r26
     876:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__addsf3x>
     87a:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_round>
     87e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscA>
     882:	38 f0       	brcs	.+14     	; 0x892 <__addsf3+0x20>
     884:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscB>
     888:	20 f0       	brcs	.+8      	; 0x892 <__addsf3+0x20>
     88a:	39 f4       	brne	.+14     	; 0x89a <__addsf3+0x28>
     88c:	9f 3f       	cpi	r25, 0xFF	; 255
     88e:	19 f4       	brne	.+6      	; 0x896 <__addsf3+0x24>
     890:	26 f4       	brtc	.+8      	; 0x89a <__addsf3+0x28>
     892:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>
     896:	0e f4       	brtc	.+2      	; 0x89a <__addsf3+0x28>
     898:	e0 95       	com	r30
     89a:	e7 fb       	bst	r30, 7
     89c:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>

000008a0 <__addsf3x>:
     8a0:	e9 2f       	mov	r30, r25
     8a2:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_split3>
     8a6:	58 f3       	brcs	.-42     	; 0x87e <__addsf3+0xc>
     8a8:	ba 17       	cp	r27, r26
     8aa:	62 07       	cpc	r22, r18
     8ac:	73 07       	cpc	r23, r19
     8ae:	84 07       	cpc	r24, r20
     8b0:	95 07       	cpc	r25, r21
     8b2:	20 f0       	brcs	.+8      	; 0x8bc <__addsf3x+0x1c>
     8b4:	79 f4       	brne	.+30     	; 0x8d4 <__addsf3x+0x34>
     8b6:	a6 f5       	brtc	.+104    	; 0x920 <__addsf3x+0x80>
     8b8:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_zero>
     8bc:	0e f4       	brtc	.+2      	; 0x8c0 <__addsf3x+0x20>
     8be:	e0 95       	com	r30
     8c0:	0b 2e       	mov	r0, r27
     8c2:	ba 2f       	mov	r27, r26
     8c4:	a0 2d       	mov	r26, r0
     8c6:	0b 01       	movw	r0, r22
     8c8:	b9 01       	movw	r22, r18
     8ca:	90 01       	movw	r18, r0
     8cc:	0c 01       	movw	r0, r24
     8ce:	ca 01       	movw	r24, r20
     8d0:	a0 01       	movw	r20, r0
     8d2:	11 24       	eor	r1, r1
     8d4:	ff 27       	eor	r31, r31
     8d6:	59 1b       	sub	r21, r25
     8d8:	99 f0       	breq	.+38     	; 0x900 <__addsf3x+0x60>
     8da:	59 3f       	cpi	r21, 0xF9	; 249
     8dc:	50 f4       	brcc	.+20     	; 0x8f2 <__addsf3x+0x52>
     8de:	50 3e       	cpi	r21, 0xE0	; 224
     8e0:	68 f1       	brcs	.+90     	; 0x93c <__addsf3x+0x9c>
     8e2:	1a 16       	cp	r1, r26
     8e4:	f0 40       	sbci	r31, 0x00	; 0
     8e6:	a2 2f       	mov	r26, r18
     8e8:	23 2f       	mov	r18, r19
     8ea:	34 2f       	mov	r19, r20
     8ec:	44 27       	eor	r20, r20
     8ee:	58 5f       	subi	r21, 0xF8	; 248
     8f0:	f3 cf       	rjmp	.-26     	; 0x8d8 <__addsf3x+0x38>
     8f2:	46 95       	lsr	r20
     8f4:	37 95       	ror	r19
     8f6:	27 95       	ror	r18
     8f8:	a7 95       	ror	r26
     8fa:	f0 40       	sbci	r31, 0x00	; 0
     8fc:	53 95       	inc	r21
     8fe:	c9 f7       	brne	.-14     	; 0x8f2 <__addsf3x+0x52>
     900:	7e f4       	brtc	.+30     	; 0x920 <__addsf3x+0x80>
     902:	1f 16       	cp	r1, r31
     904:	ba 0b       	sbc	r27, r26
     906:	62 0b       	sbc	r22, r18
     908:	73 0b       	sbc	r23, r19
     90a:	84 0b       	sbc	r24, r20
     90c:	ba f0       	brmi	.+46     	; 0x93c <__addsf3x+0x9c>
     90e:	91 50       	subi	r25, 0x01	; 1
     910:	a1 f0       	breq	.+40     	; 0x93a <__addsf3x+0x9a>
     912:	ff 0f       	add	r31, r31
     914:	bb 1f       	adc	r27, r27
     916:	66 1f       	adc	r22, r22
     918:	77 1f       	adc	r23, r23
     91a:	88 1f       	adc	r24, r24
     91c:	c2 f7       	brpl	.-16     	; 0x90e <__addsf3x+0x6e>
     91e:	0e c0       	rjmp	.+28     	; 0x93c <__addsf3x+0x9c>
     920:	ba 0f       	add	r27, r26
     922:	62 1f       	adc	r22, r18
     924:	73 1f       	adc	r23, r19
     926:	84 1f       	adc	r24, r20
     928:	48 f4       	brcc	.+18     	; 0x93c <__addsf3x+0x9c>
     92a:	87 95       	ror	r24
     92c:	77 95       	ror	r23
     92e:	67 95       	ror	r22
     930:	b7 95       	ror	r27
     932:	f7 95       	ror	r31
     934:	9e 3f       	cpi	r25, 0xFE	; 254
     936:	08 f0       	brcs	.+2      	; 0x93a <__addsf3x+0x9a>
     938:	b0 cf       	rjmp	.-160    	; 0x89a <__addsf3+0x28>
     93a:	93 95       	inc	r25
     93c:	88 0f       	add	r24, r24
     93e:	08 f0       	brcs	.+2      	; 0x942 <__addsf3x+0xa2>
     940:	99 27       	eor	r25, r25
     942:	ee 0f       	add	r30, r30
     944:	97 95       	ror	r25
     946:	87 95       	ror	r24
     948:	08 95       	ret

0000094a <__cmpsf2>:
     94a:	0e 94 88 05 	call	0xb10	; 0xb10 <__fp_cmp>
     94e:	08 f4       	brcc	.+2      	; 0x952 <__cmpsf2+0x8>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	08 95       	ret

00000954 <__divsf3>:
     954:	0e 94 be 04 	call	0x97c	; 0x97c <__divsf3x>
     958:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_round>
     95c:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscB>
     960:	58 f0       	brcs	.+22     	; 0x978 <__divsf3+0x24>
     962:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscA>
     966:	40 f0       	brcs	.+16     	; 0x978 <__divsf3+0x24>
     968:	29 f4       	brne	.+10     	; 0x974 <__divsf3+0x20>
     96a:	5f 3f       	cpi	r21, 0xFF	; 255
     96c:	29 f0       	breq	.+10     	; 0x978 <__divsf3+0x24>
     96e:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     972:	51 11       	cpse	r21, r1
     974:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
     978:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>

0000097c <__divsf3x>:
     97c:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_split3>
     980:	68 f3       	brcs	.-38     	; 0x95c <__divsf3+0x8>

00000982 <__divsf3_pse>:
     982:	99 23       	and	r25, r25
     984:	b1 f3       	breq	.-20     	; 0x972 <__divsf3+0x1e>
     986:	55 23       	and	r21, r21
     988:	91 f3       	breq	.-28     	; 0x96e <__divsf3+0x1a>
     98a:	95 1b       	sub	r25, r21
     98c:	55 0b       	sbc	r21, r21
     98e:	bb 27       	eor	r27, r27
     990:	aa 27       	eor	r26, r26
     992:	62 17       	cp	r22, r18
     994:	73 07       	cpc	r23, r19
     996:	84 07       	cpc	r24, r20
     998:	38 f0       	brcs	.+14     	; 0x9a8 <__divsf3_pse+0x26>
     99a:	9f 5f       	subi	r25, 0xFF	; 255
     99c:	5f 4f       	sbci	r21, 0xFF	; 255
     99e:	22 0f       	add	r18, r18
     9a0:	33 1f       	adc	r19, r19
     9a2:	44 1f       	adc	r20, r20
     9a4:	aa 1f       	adc	r26, r26
     9a6:	a9 f3       	breq	.-22     	; 0x992 <__divsf3_pse+0x10>
     9a8:	35 d0       	rcall	.+106    	; 0xa14 <__divsf3_pse+0x92>
     9aa:	0e 2e       	mov	r0, r30
     9ac:	3a f0       	brmi	.+14     	; 0x9bc <__divsf3_pse+0x3a>
     9ae:	e0 e8       	ldi	r30, 0x80	; 128
     9b0:	32 d0       	rcall	.+100    	; 0xa16 <__divsf3_pse+0x94>
     9b2:	91 50       	subi	r25, 0x01	; 1
     9b4:	50 40       	sbci	r21, 0x00	; 0
     9b6:	e6 95       	lsr	r30
     9b8:	00 1c       	adc	r0, r0
     9ba:	ca f7       	brpl	.-14     	; 0x9ae <__divsf3_pse+0x2c>
     9bc:	2b d0       	rcall	.+86     	; 0xa14 <__divsf3_pse+0x92>
     9be:	fe 2f       	mov	r31, r30
     9c0:	29 d0       	rcall	.+82     	; 0xa14 <__divsf3_pse+0x92>
     9c2:	66 0f       	add	r22, r22
     9c4:	77 1f       	adc	r23, r23
     9c6:	88 1f       	adc	r24, r24
     9c8:	bb 1f       	adc	r27, r27
     9ca:	26 17       	cp	r18, r22
     9cc:	37 07       	cpc	r19, r23
     9ce:	48 07       	cpc	r20, r24
     9d0:	ab 07       	cpc	r26, r27
     9d2:	b0 e8       	ldi	r27, 0x80	; 128
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <__divsf3_pse+0x56>
     9d6:	bb 0b       	sbc	r27, r27
     9d8:	80 2d       	mov	r24, r0
     9da:	bf 01       	movw	r22, r30
     9dc:	ff 27       	eor	r31, r31
     9de:	93 58       	subi	r25, 0x83	; 131
     9e0:	5f 4f       	sbci	r21, 0xFF	; 255
     9e2:	3a f0       	brmi	.+14     	; 0x9f2 <__divsf3_pse+0x70>
     9e4:	9e 3f       	cpi	r25, 0xFE	; 254
     9e6:	51 05       	cpc	r21, r1
     9e8:	78 f0       	brcs	.+30     	; 0xa08 <__divsf3_pse+0x86>
     9ea:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     9ee:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
     9f2:	5f 3f       	cpi	r21, 0xFF	; 255
     9f4:	e4 f3       	brlt	.-8      	; 0x9ee <__divsf3_pse+0x6c>
     9f6:	98 3e       	cpi	r25, 0xE8	; 232
     9f8:	d4 f3       	brlt	.-12     	; 0x9ee <__divsf3_pse+0x6c>
     9fa:	86 95       	lsr	r24
     9fc:	77 95       	ror	r23
     9fe:	67 95       	ror	r22
     a00:	b7 95       	ror	r27
     a02:	f7 95       	ror	r31
     a04:	9f 5f       	subi	r25, 0xFF	; 255
     a06:	c9 f7       	brne	.-14     	; 0x9fa <__divsf3_pse+0x78>
     a08:	88 0f       	add	r24, r24
     a0a:	91 1d       	adc	r25, r1
     a0c:	96 95       	lsr	r25
     a0e:	87 95       	ror	r24
     a10:	97 f9       	bld	r25, 7
     a12:	08 95       	ret
     a14:	e1 e0       	ldi	r30, 0x01	; 1
     a16:	66 0f       	add	r22, r22
     a18:	77 1f       	adc	r23, r23
     a1a:	88 1f       	adc	r24, r24
     a1c:	bb 1f       	adc	r27, r27
     a1e:	62 17       	cp	r22, r18
     a20:	73 07       	cpc	r23, r19
     a22:	84 07       	cpc	r24, r20
     a24:	ba 07       	cpc	r27, r26
     a26:	20 f0       	brcs	.+8      	; 0xa30 <__divsf3_pse+0xae>
     a28:	62 1b       	sub	r22, r18
     a2a:	73 0b       	sbc	r23, r19
     a2c:	84 0b       	sbc	r24, r20
     a2e:	ba 0b       	sbc	r27, r26
     a30:	ee 1f       	adc	r30, r30
     a32:	88 f7       	brcc	.-30     	; 0xa16 <__divsf3_pse+0x94>
     a34:	e0 95       	com	r30
     a36:	08 95       	ret

00000a38 <__fixunssfsi>:
     a38:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_splitA>
     a3c:	88 f0       	brcs	.+34     	; 0xa60 <__fixunssfsi+0x28>
     a3e:	9f 57       	subi	r25, 0x7F	; 127
     a40:	98 f0       	brcs	.+38     	; 0xa68 <__fixunssfsi+0x30>
     a42:	b9 2f       	mov	r27, r25
     a44:	99 27       	eor	r25, r25
     a46:	b7 51       	subi	r27, 0x17	; 23
     a48:	b0 f0       	brcs	.+44     	; 0xa76 <__fixunssfsi+0x3e>
     a4a:	e1 f0       	breq	.+56     	; 0xa84 <__fixunssfsi+0x4c>
     a4c:	66 0f       	add	r22, r22
     a4e:	77 1f       	adc	r23, r23
     a50:	88 1f       	adc	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	1a f0       	brmi	.+6      	; 0xa5c <__fixunssfsi+0x24>
     a56:	ba 95       	dec	r27
     a58:	c9 f7       	brne	.-14     	; 0xa4c <__fixunssfsi+0x14>
     a5a:	14 c0       	rjmp	.+40     	; 0xa84 <__fixunssfsi+0x4c>
     a5c:	b1 30       	cpi	r27, 0x01	; 1
     a5e:	91 f0       	breq	.+36     	; 0xa84 <__fixunssfsi+0x4c>
     a60:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_zero>
     a64:	b1 e0       	ldi	r27, 0x01	; 1
     a66:	08 95       	ret
     a68:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_zero>
     a6c:	67 2f       	mov	r22, r23
     a6e:	78 2f       	mov	r23, r24
     a70:	88 27       	eor	r24, r24
     a72:	b8 5f       	subi	r27, 0xF8	; 248
     a74:	39 f0       	breq	.+14     	; 0xa84 <__fixunssfsi+0x4c>
     a76:	b9 3f       	cpi	r27, 0xF9	; 249
     a78:	cc f3       	brlt	.-14     	; 0xa6c <__fixunssfsi+0x34>
     a7a:	86 95       	lsr	r24
     a7c:	77 95       	ror	r23
     a7e:	67 95       	ror	r22
     a80:	b3 95       	inc	r27
     a82:	d9 f7       	brne	.-10     	; 0xa7a <__fixunssfsi+0x42>
     a84:	3e f4       	brtc	.+14     	; 0xa94 <__fixunssfsi+0x5c>
     a86:	90 95       	com	r25
     a88:	80 95       	com	r24
     a8a:	70 95       	com	r23
     a8c:	61 95       	neg	r22
     a8e:	7f 4f       	sbci	r23, 0xFF	; 255
     a90:	8f 4f       	sbci	r24, 0xFF	; 255
     a92:	9f 4f       	sbci	r25, 0xFF	; 255
     a94:	08 95       	ret

00000a96 <__floatunsisf>:
     a96:	e8 94       	clt
     a98:	09 c0       	rjmp	.+18     	; 0xaac <__floatsisf+0x12>

00000a9a <__floatsisf>:
     a9a:	97 fb       	bst	r25, 7
     a9c:	3e f4       	brtc	.+14     	; 0xaac <__floatsisf+0x12>
     a9e:	90 95       	com	r25
     aa0:	80 95       	com	r24
     aa2:	70 95       	com	r23
     aa4:	61 95       	neg	r22
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	8f 4f       	sbci	r24, 0xFF	; 255
     aaa:	9f 4f       	sbci	r25, 0xFF	; 255
     aac:	99 23       	and	r25, r25
     aae:	a9 f0       	breq	.+42     	; 0xada <__floatsisf+0x40>
     ab0:	f9 2f       	mov	r31, r25
     ab2:	96 e9       	ldi	r25, 0x96	; 150
     ab4:	bb 27       	eor	r27, r27
     ab6:	93 95       	inc	r25
     ab8:	f6 95       	lsr	r31
     aba:	87 95       	ror	r24
     abc:	77 95       	ror	r23
     abe:	67 95       	ror	r22
     ac0:	b7 95       	ror	r27
     ac2:	f1 11       	cpse	r31, r1
     ac4:	f8 cf       	rjmp	.-16     	; 0xab6 <__floatsisf+0x1c>
     ac6:	fa f4       	brpl	.+62     	; 0xb06 <__floatsisf+0x6c>
     ac8:	bb 0f       	add	r27, r27
     aca:	11 f4       	brne	.+4      	; 0xad0 <__floatsisf+0x36>
     acc:	60 ff       	sbrs	r22, 0
     ace:	1b c0       	rjmp	.+54     	; 0xb06 <__floatsisf+0x6c>
     ad0:	6f 5f       	subi	r22, 0xFF	; 255
     ad2:	7f 4f       	sbci	r23, 0xFF	; 255
     ad4:	8f 4f       	sbci	r24, 0xFF	; 255
     ad6:	9f 4f       	sbci	r25, 0xFF	; 255
     ad8:	16 c0       	rjmp	.+44     	; 0xb06 <__floatsisf+0x6c>
     ada:	88 23       	and	r24, r24
     adc:	11 f0       	breq	.+4      	; 0xae2 <__floatsisf+0x48>
     ade:	96 e9       	ldi	r25, 0x96	; 150
     ae0:	11 c0       	rjmp	.+34     	; 0xb04 <__floatsisf+0x6a>
     ae2:	77 23       	and	r23, r23
     ae4:	21 f0       	breq	.+8      	; 0xaee <__floatsisf+0x54>
     ae6:	9e e8       	ldi	r25, 0x8E	; 142
     ae8:	87 2f       	mov	r24, r23
     aea:	76 2f       	mov	r23, r22
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <__floatsisf+0x5e>
     aee:	66 23       	and	r22, r22
     af0:	71 f0       	breq	.+28     	; 0xb0e <__floatsisf+0x74>
     af2:	96 e8       	ldi	r25, 0x86	; 134
     af4:	86 2f       	mov	r24, r22
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	2a f0       	brmi	.+10     	; 0xb06 <__floatsisf+0x6c>
     afc:	9a 95       	dec	r25
     afe:	66 0f       	add	r22, r22
     b00:	77 1f       	adc	r23, r23
     b02:	88 1f       	adc	r24, r24
     b04:	da f7       	brpl	.-10     	; 0xafc <__floatsisf+0x62>
     b06:	88 0f       	add	r24, r24
     b08:	96 95       	lsr	r25
     b0a:	87 95       	ror	r24
     b0c:	97 f9       	bld	r25, 7
     b0e:	08 95       	ret

00000b10 <__fp_cmp>:
     b10:	99 0f       	add	r25, r25
     b12:	00 08       	sbc	r0, r0
     b14:	55 0f       	add	r21, r21
     b16:	aa 0b       	sbc	r26, r26
     b18:	e0 e8       	ldi	r30, 0x80	; 128
     b1a:	fe ef       	ldi	r31, 0xFE	; 254
     b1c:	16 16       	cp	r1, r22
     b1e:	17 06       	cpc	r1, r23
     b20:	e8 07       	cpc	r30, r24
     b22:	f9 07       	cpc	r31, r25
     b24:	c0 f0       	brcs	.+48     	; 0xb56 <__fp_cmp+0x46>
     b26:	12 16       	cp	r1, r18
     b28:	13 06       	cpc	r1, r19
     b2a:	e4 07       	cpc	r30, r20
     b2c:	f5 07       	cpc	r31, r21
     b2e:	98 f0       	brcs	.+38     	; 0xb56 <__fp_cmp+0x46>
     b30:	62 1b       	sub	r22, r18
     b32:	73 0b       	sbc	r23, r19
     b34:	84 0b       	sbc	r24, r20
     b36:	95 0b       	sbc	r25, r21
     b38:	39 f4       	brne	.+14     	; 0xb48 <__fp_cmp+0x38>
     b3a:	0a 26       	eor	r0, r26
     b3c:	61 f0       	breq	.+24     	; 0xb56 <__fp_cmp+0x46>
     b3e:	23 2b       	or	r18, r19
     b40:	24 2b       	or	r18, r20
     b42:	25 2b       	or	r18, r21
     b44:	21 f4       	brne	.+8      	; 0xb4e <__fp_cmp+0x3e>
     b46:	08 95       	ret
     b48:	0a 26       	eor	r0, r26
     b4a:	09 f4       	brne	.+2      	; 0xb4e <__fp_cmp+0x3e>
     b4c:	a1 40       	sbci	r26, 0x01	; 1
     b4e:	a6 95       	lsr	r26
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	81 1d       	adc	r24, r1
     b54:	81 1d       	adc	r24, r1
     b56:	08 95       	ret

00000b58 <__fp_inf>:
     b58:	97 f9       	bld	r25, 7
     b5a:	9f 67       	ori	r25, 0x7F	; 127
     b5c:	80 e8       	ldi	r24, 0x80	; 128
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	08 95       	ret

00000b64 <__fp_nan>:
     b64:	9f ef       	ldi	r25, 0xFF	; 255
     b66:	80 ec       	ldi	r24, 0xC0	; 192
     b68:	08 95       	ret

00000b6a <__fp_pscA>:
     b6a:	00 24       	eor	r0, r0
     b6c:	0a 94       	dec	r0
     b6e:	16 16       	cp	r1, r22
     b70:	17 06       	cpc	r1, r23
     b72:	18 06       	cpc	r1, r24
     b74:	09 06       	cpc	r0, r25
     b76:	08 95       	ret

00000b78 <__fp_pscB>:
     b78:	00 24       	eor	r0, r0
     b7a:	0a 94       	dec	r0
     b7c:	12 16       	cp	r1, r18
     b7e:	13 06       	cpc	r1, r19
     b80:	14 06       	cpc	r1, r20
     b82:	05 06       	cpc	r0, r21
     b84:	08 95       	ret

00000b86 <__fp_round>:
     b86:	09 2e       	mov	r0, r25
     b88:	03 94       	inc	r0
     b8a:	00 0c       	add	r0, r0
     b8c:	11 f4       	brne	.+4      	; 0xb92 <__fp_round+0xc>
     b8e:	88 23       	and	r24, r24
     b90:	52 f0       	brmi	.+20     	; 0xba6 <__fp_round+0x20>
     b92:	bb 0f       	add	r27, r27
     b94:	40 f4       	brcc	.+16     	; 0xba6 <__fp_round+0x20>
     b96:	bf 2b       	or	r27, r31
     b98:	11 f4       	brne	.+4      	; 0xb9e <__fp_round+0x18>
     b9a:	60 ff       	sbrs	r22, 0
     b9c:	04 c0       	rjmp	.+8      	; 0xba6 <__fp_round+0x20>
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	8f 4f       	sbci	r24, 0xFF	; 255
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
     ba6:	08 95       	ret

00000ba8 <__fp_split3>:
     ba8:	57 fd       	sbrc	r21, 7
     baa:	90 58       	subi	r25, 0x80	; 128
     bac:	44 0f       	add	r20, r20
     bae:	55 1f       	adc	r21, r21
     bb0:	59 f0       	breq	.+22     	; 0xbc8 <__fp_splitA+0x10>
     bb2:	5f 3f       	cpi	r21, 0xFF	; 255
     bb4:	71 f0       	breq	.+28     	; 0xbd2 <__fp_splitA+0x1a>
     bb6:	47 95       	ror	r20

00000bb8 <__fp_splitA>:
     bb8:	88 0f       	add	r24, r24
     bba:	97 fb       	bst	r25, 7
     bbc:	99 1f       	adc	r25, r25
     bbe:	61 f0       	breq	.+24     	; 0xbd8 <__fp_splitA+0x20>
     bc0:	9f 3f       	cpi	r25, 0xFF	; 255
     bc2:	79 f0       	breq	.+30     	; 0xbe2 <__fp_splitA+0x2a>
     bc4:	87 95       	ror	r24
     bc6:	08 95       	ret
     bc8:	12 16       	cp	r1, r18
     bca:	13 06       	cpc	r1, r19
     bcc:	14 06       	cpc	r1, r20
     bce:	55 1f       	adc	r21, r21
     bd0:	f2 cf       	rjmp	.-28     	; 0xbb6 <__fp_split3+0xe>
     bd2:	46 95       	lsr	r20
     bd4:	f1 df       	rcall	.-30     	; 0xbb8 <__fp_splitA>
     bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <__fp_splitA+0x30>
     bd8:	16 16       	cp	r1, r22
     bda:	17 06       	cpc	r1, r23
     bdc:	18 06       	cpc	r1, r24
     bde:	99 1f       	adc	r25, r25
     be0:	f1 cf       	rjmp	.-30     	; 0xbc4 <__fp_splitA+0xc>
     be2:	86 95       	lsr	r24
     be4:	71 05       	cpc	r23, r1
     be6:	61 05       	cpc	r22, r1
     be8:	08 94       	sec
     bea:	08 95       	ret

00000bec <__fp_zero>:
     bec:	e8 94       	clt

00000bee <__fp_szero>:
     bee:	bb 27       	eor	r27, r27
     bf0:	66 27       	eor	r22, r22
     bf2:	77 27       	eor	r23, r23
     bf4:	cb 01       	movw	r24, r22
     bf6:	97 f9       	bld	r25, 7
     bf8:	08 95       	ret

00000bfa <__mulsf3>:
     bfa:	0e 94 10 06 	call	0xc20	; 0xc20 <__mulsf3x>
     bfe:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_round>
     c02:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscA>
     c06:	38 f0       	brcs	.+14     	; 0xc16 <__mulsf3+0x1c>
     c08:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscB>
     c0c:	20 f0       	brcs	.+8      	; 0xc16 <__mulsf3+0x1c>
     c0e:	95 23       	and	r25, r21
     c10:	11 f0       	breq	.+4      	; 0xc16 <__mulsf3+0x1c>
     c12:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     c16:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>
     c1a:	11 24       	eor	r1, r1
     c1c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>

00000c20 <__mulsf3x>:
     c20:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_split3>
     c24:	70 f3       	brcs	.-36     	; 0xc02 <__mulsf3+0x8>

00000c26 <__mulsf3_pse>:
     c26:	95 9f       	mul	r25, r21
     c28:	c1 f3       	breq	.-16     	; 0xc1a <__mulsf3+0x20>
     c2a:	95 0f       	add	r25, r21
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	55 1f       	adc	r21, r21
     c30:	62 9f       	mul	r22, r18
     c32:	f0 01       	movw	r30, r0
     c34:	72 9f       	mul	r23, r18
     c36:	bb 27       	eor	r27, r27
     c38:	f0 0d       	add	r31, r0
     c3a:	b1 1d       	adc	r27, r1
     c3c:	63 9f       	mul	r22, r19
     c3e:	aa 27       	eor	r26, r26
     c40:	f0 0d       	add	r31, r0
     c42:	b1 1d       	adc	r27, r1
     c44:	aa 1f       	adc	r26, r26
     c46:	64 9f       	mul	r22, r20
     c48:	66 27       	eor	r22, r22
     c4a:	b0 0d       	add	r27, r0
     c4c:	a1 1d       	adc	r26, r1
     c4e:	66 1f       	adc	r22, r22
     c50:	82 9f       	mul	r24, r18
     c52:	22 27       	eor	r18, r18
     c54:	b0 0d       	add	r27, r0
     c56:	a1 1d       	adc	r26, r1
     c58:	62 1f       	adc	r22, r18
     c5a:	73 9f       	mul	r23, r19
     c5c:	b0 0d       	add	r27, r0
     c5e:	a1 1d       	adc	r26, r1
     c60:	62 1f       	adc	r22, r18
     c62:	83 9f       	mul	r24, r19
     c64:	a0 0d       	add	r26, r0
     c66:	61 1d       	adc	r22, r1
     c68:	22 1f       	adc	r18, r18
     c6a:	74 9f       	mul	r23, r20
     c6c:	33 27       	eor	r19, r19
     c6e:	a0 0d       	add	r26, r0
     c70:	61 1d       	adc	r22, r1
     c72:	23 1f       	adc	r18, r19
     c74:	84 9f       	mul	r24, r20
     c76:	60 0d       	add	r22, r0
     c78:	21 1d       	adc	r18, r1
     c7a:	82 2f       	mov	r24, r18
     c7c:	76 2f       	mov	r23, r22
     c7e:	6a 2f       	mov	r22, r26
     c80:	11 24       	eor	r1, r1
     c82:	9f 57       	subi	r25, 0x7F	; 127
     c84:	50 40       	sbci	r21, 0x00	; 0
     c86:	9a f0       	brmi	.+38     	; 0xcae <__mulsf3_pse+0x88>
     c88:	f1 f0       	breq	.+60     	; 0xcc6 <__mulsf3_pse+0xa0>
     c8a:	88 23       	and	r24, r24
     c8c:	4a f0       	brmi	.+18     	; 0xca0 <__mulsf3_pse+0x7a>
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	bb 1f       	adc	r27, r27
     c94:	66 1f       	adc	r22, r22
     c96:	77 1f       	adc	r23, r23
     c98:	88 1f       	adc	r24, r24
     c9a:	91 50       	subi	r25, 0x01	; 1
     c9c:	50 40       	sbci	r21, 0x00	; 0
     c9e:	a9 f7       	brne	.-22     	; 0xc8a <__mulsf3_pse+0x64>
     ca0:	9e 3f       	cpi	r25, 0xFE	; 254
     ca2:	51 05       	cpc	r21, r1
     ca4:	80 f0       	brcs	.+32     	; 0xcc6 <__mulsf3_pse+0xa0>
     ca6:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     caa:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
     cae:	5f 3f       	cpi	r21, 0xFF	; 255
     cb0:	e4 f3       	brlt	.-8      	; 0xcaa <__mulsf3_pse+0x84>
     cb2:	98 3e       	cpi	r25, 0xE8	; 232
     cb4:	d4 f3       	brlt	.-12     	; 0xcaa <__mulsf3_pse+0x84>
     cb6:	86 95       	lsr	r24
     cb8:	77 95       	ror	r23
     cba:	67 95       	ror	r22
     cbc:	b7 95       	ror	r27
     cbe:	f7 95       	ror	r31
     cc0:	e7 95       	ror	r30
     cc2:	9f 5f       	subi	r25, 0xFF	; 255
     cc4:	c1 f7       	brne	.-16     	; 0xcb6 <__mulsf3_pse+0x90>
     cc6:	fe 2b       	or	r31, r30
     cc8:	88 0f       	add	r24, r24
     cca:	91 1d       	adc	r25, r1
     ccc:	96 95       	lsr	r25
     cce:	87 95       	ror	r24
     cd0:	97 f9       	bld	r25, 7
     cd2:	08 95       	ret

00000cd4 <pow>:
     cd4:	fa 01       	movw	r30, r20
     cd6:	ee 0f       	add	r30, r30
     cd8:	ff 1f       	adc	r31, r31
     cda:	30 96       	adiw	r30, 0x00	; 0
     cdc:	21 05       	cpc	r18, r1
     cde:	31 05       	cpc	r19, r1
     ce0:	a1 f1       	breq	.+104    	; 0xd4a <pow+0x76>
     ce2:	61 15       	cp	r22, r1
     ce4:	71 05       	cpc	r23, r1
     ce6:	61 f4       	brne	.+24     	; 0xd00 <pow+0x2c>
     ce8:	80 38       	cpi	r24, 0x80	; 128
     cea:	bf e3       	ldi	r27, 0x3F	; 63
     cec:	9b 07       	cpc	r25, r27
     cee:	49 f1       	breq	.+82     	; 0xd42 <pow+0x6e>
     cf0:	68 94       	set
     cf2:	90 38       	cpi	r25, 0x80	; 128
     cf4:	81 05       	cpc	r24, r1
     cf6:	61 f0       	breq	.+24     	; 0xd10 <pow+0x3c>
     cf8:	80 38       	cpi	r24, 0x80	; 128
     cfa:	bf ef       	ldi	r27, 0xFF	; 255
     cfc:	9b 07       	cpc	r25, r27
     cfe:	41 f0       	breq	.+16     	; 0xd10 <pow+0x3c>
     d00:	99 23       	and	r25, r25
     d02:	4a f5       	brpl	.+82     	; 0xd56 <pow+0x82>
     d04:	ff 3f       	cpi	r31, 0xFF	; 255
     d06:	e1 05       	cpc	r30, r1
     d08:	31 05       	cpc	r19, r1
     d0a:	21 05       	cpc	r18, r1
     d0c:	19 f1       	breq	.+70     	; 0xd54 <pow+0x80>
     d0e:	e8 94       	clt
     d10:	08 94       	sec
     d12:	e7 95       	ror	r30
     d14:	d9 01       	movw	r26, r18
     d16:	aa 23       	and	r26, r26
     d18:	29 f4       	brne	.+10     	; 0xd24 <pow+0x50>
     d1a:	ab 2f       	mov	r26, r27
     d1c:	be 2f       	mov	r27, r30
     d1e:	f8 5f       	subi	r31, 0xF8	; 248
     d20:	d0 f3       	brcs	.-12     	; 0xd16 <pow+0x42>
     d22:	10 c0       	rjmp	.+32     	; 0xd44 <pow+0x70>
     d24:	ff 5f       	subi	r31, 0xFF	; 255
     d26:	70 f4       	brcc	.+28     	; 0xd44 <pow+0x70>
     d28:	a6 95       	lsr	r26
     d2a:	e0 f7       	brcc	.-8      	; 0xd24 <pow+0x50>
     d2c:	f7 39       	cpi	r31, 0x97	; 151
     d2e:	50 f0       	brcs	.+20     	; 0xd44 <pow+0x70>
     d30:	19 f0       	breq	.+6      	; 0xd38 <pow+0x64>
     d32:	ff 3a       	cpi	r31, 0xAF	; 175
     d34:	38 f4       	brcc	.+14     	; 0xd44 <pow+0x70>
     d36:	9f 77       	andi	r25, 0x7F	; 127
     d38:	9f 93       	push	r25
     d3a:	0d d0       	rcall	.+26     	; 0xd56 <pow+0x82>
     d3c:	0f 90       	pop	r0
     d3e:	07 fc       	sbrc	r0, 7
     d40:	90 58       	subi	r25, 0x80	; 128
     d42:	08 95       	ret
     d44:	46 f0       	brts	.+16     	; 0xd56 <pow+0x82>
     d46:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	80 e8       	ldi	r24, 0x80	; 128
     d50:	9f e3       	ldi	r25, 0x3F	; 63
     d52:	08 95       	ret
     d54:	4f e7       	ldi	r20, 0x7F	; 127
     d56:	9f 77       	andi	r25, 0x7F	; 127
     d58:	5f 93       	push	r21
     d5a:	4f 93       	push	r20
     d5c:	3f 93       	push	r19
     d5e:	2f 93       	push	r18
     d60:	0e 94 65 07 	call	0xeca	; 0xeca <log>
     d64:	2f 91       	pop	r18
     d66:	3f 91       	pop	r19
     d68:	4f 91       	pop	r20
     d6a:	5f 91       	pop	r21
     d6c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
     d70:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <exp>
     d74:	29 f4       	brne	.+10     	; 0xd80 <pow+0xac>
     d76:	16 f0       	brts	.+4      	; 0xd7c <pow+0xa8>
     d78:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     d7c:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_zero>
     d80:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>

00000d84 <exp>:
     d84:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_splitA>
     d88:	a8 f3       	brcs	.-22     	; 0xd74 <pow+0xa0>
     d8a:	96 38       	cpi	r25, 0x86	; 134
     d8c:	a0 f7       	brcc	.-24     	; 0xd76 <pow+0xa2>
     d8e:	07 f8       	bld	r0, 7
     d90:	0f 92       	push	r0
     d92:	e8 94       	clt
     d94:	2b e3       	ldi	r18, 0x3B	; 59
     d96:	3a ea       	ldi	r19, 0xAA	; 170
     d98:	48 eb       	ldi	r20, 0xB8	; 184
     d9a:	5f e7       	ldi	r21, 0x7F	; 127
     d9c:	0e 94 13 06 	call	0xc26	; 0xc26 <__mulsf3_pse>
     da0:	0f 92       	push	r0
     da2:	0f 92       	push	r0
     da4:	0f 92       	push	r0
     da6:	4d b7       	in	r20, 0x3d	; 61
     da8:	5e b7       	in	r21, 0x3e	; 62
     daa:	0f 92       	push	r0
     dac:	0e 94 ad 07 	call	0xf5a	; 0xf5a <modf>
     db0:	e8 e7       	ldi	r30, 0x78	; 120
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_powser>
     db8:	4f 91       	pop	r20
     dba:	5f 91       	pop	r21
     dbc:	ef 91       	pop	r30
     dbe:	ff 91       	pop	r31
     dc0:	e5 95       	asr	r30
     dc2:	ee 1f       	adc	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	49 f0       	breq	.+18     	; 0xdda <exp+0x56>
     dc8:	fe 57       	subi	r31, 0x7E	; 126
     dca:	e0 68       	ori	r30, 0x80	; 128
     dcc:	44 27       	eor	r20, r20
     dce:	ee 0f       	add	r30, r30
     dd0:	44 1f       	adc	r20, r20
     dd2:	fa 95       	dec	r31
     dd4:	e1 f7       	brne	.-8      	; 0xdce <exp+0x4a>
     dd6:	41 95       	neg	r20
     dd8:	55 0b       	sbc	r21, r21
     dda:	0e 94 27 07 	call	0xe4e	; 0xe4e <ldexp>
     dde:	0f 90       	pop	r0
     de0:	07 fe       	sbrs	r0, 7
     de2:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <inverse>
     de6:	08 95       	ret

00000de8 <__fp_powser>:
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	1f 93       	push	r17
     dee:	0f 93       	push	r16
     df0:	ff 92       	push	r15
     df2:	ef 92       	push	r14
     df4:	df 92       	push	r13
     df6:	7b 01       	movw	r14, r22
     df8:	8c 01       	movw	r16, r24
     dfa:	68 94       	set
     dfc:	06 c0       	rjmp	.+12     	; 0xe0a <__fp_powser+0x22>
     dfe:	da 2e       	mov	r13, r26
     e00:	ef 01       	movw	r28, r30
     e02:	0e 94 10 06 	call	0xc20	; 0xc20 <__mulsf3x>
     e06:	fe 01       	movw	r30, r28
     e08:	e8 94       	clt
     e0a:	a5 91       	lpm	r26, Z+
     e0c:	25 91       	lpm	r18, Z+
     e0e:	35 91       	lpm	r19, Z+
     e10:	45 91       	lpm	r20, Z+
     e12:	55 91       	lpm	r21, Z+
     e14:	a6 f3       	brts	.-24     	; 0xdfe <__fp_powser+0x16>
     e16:	ef 01       	movw	r28, r30
     e18:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__addsf3x>
     e1c:	fe 01       	movw	r30, r28
     e1e:	97 01       	movw	r18, r14
     e20:	a8 01       	movw	r20, r16
     e22:	da 94       	dec	r13
     e24:	69 f7       	brne	.-38     	; 0xe00 <__fp_powser+0x18>
     e26:	df 90       	pop	r13
     e28:	ef 90       	pop	r14
     e2a:	ff 90       	pop	r15
     e2c:	0f 91       	pop	r16
     e2e:	1f 91       	pop	r17
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <inverse>:
     e36:	9b 01       	movw	r18, r22
     e38:	ac 01       	movw	r20, r24
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	80 e8       	ldi	r24, 0x80	; 128
     e40:	9f e3       	ldi	r25, 0x3F	; 63
     e42:	0c 94 aa 04 	jmp	0x954	; 0x954 <__divsf3>
     e46:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     e4a:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__fp_mpack>

00000e4e <ldexp>:
     e4e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_splitA>
     e52:	d8 f3       	brcs	.-10     	; 0xe4a <inverse+0x14>
     e54:	99 23       	and	r25, r25
     e56:	c9 f3       	breq	.-14     	; 0xe4a <inverse+0x14>
     e58:	94 0f       	add	r25, r20
     e5a:	51 1d       	adc	r21, r1
     e5c:	a3 f3       	brvs	.-24     	; 0xe46 <inverse+0x10>
     e5e:	91 50       	subi	r25, 0x01	; 1
     e60:	50 40       	sbci	r21, 0x00	; 0
     e62:	94 f0       	brlt	.+36     	; 0xe88 <ldexp+0x3a>
     e64:	59 f0       	breq	.+22     	; 0xe7c <ldexp+0x2e>
     e66:	88 23       	and	r24, r24
     e68:	32 f0       	brmi	.+12     	; 0xe76 <ldexp+0x28>
     e6a:	66 0f       	add	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	88 1f       	adc	r24, r24
     e70:	91 50       	subi	r25, 0x01	; 1
     e72:	50 40       	sbci	r21, 0x00	; 0
     e74:	c1 f7       	brne	.-16     	; 0xe66 <ldexp+0x18>
     e76:	9e 3f       	cpi	r25, 0xFE	; 254
     e78:	51 05       	cpc	r21, r1
     e7a:	2c f7       	brge	.-54     	; 0xe46 <inverse+0x10>
     e7c:	88 0f       	add	r24, r24
     e7e:	91 1d       	adc	r25, r1
     e80:	96 95       	lsr	r25
     e82:	87 95       	ror	r24
     e84:	97 f9       	bld	r25, 7
     e86:	08 95       	ret
     e88:	5f 3f       	cpi	r21, 0xFF	; 255
     e8a:	ac f0       	brlt	.+42     	; 0xeb6 <ldexp+0x68>
     e8c:	98 3e       	cpi	r25, 0xE8	; 232
     e8e:	9c f0       	brlt	.+38     	; 0xeb6 <ldexp+0x68>
     e90:	bb 27       	eor	r27, r27
     e92:	86 95       	lsr	r24
     e94:	77 95       	ror	r23
     e96:	67 95       	ror	r22
     e98:	b7 95       	ror	r27
     e9a:	08 f4       	brcc	.+2      	; 0xe9e <ldexp+0x50>
     e9c:	b1 60       	ori	r27, 0x01	; 1
     e9e:	93 95       	inc	r25
     ea0:	c1 f7       	brne	.-16     	; 0xe92 <ldexp+0x44>
     ea2:	bb 0f       	add	r27, r27
     ea4:	58 f7       	brcc	.-42     	; 0xe7c <ldexp+0x2e>
     ea6:	11 f4       	brne	.+4      	; 0xeac <ldexp+0x5e>
     ea8:	60 ff       	sbrs	r22, 0
     eaa:	e8 cf       	rjmp	.-48     	; 0xe7c <ldexp+0x2e>
     eac:	6f 5f       	subi	r22, 0xFF	; 255
     eae:	7f 4f       	sbci	r23, 0xFF	; 255
     eb0:	8f 4f       	sbci	r24, 0xFF	; 255
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	e3 cf       	rjmp	.-58     	; 0xe7c <ldexp+0x2e>
     eb6:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
     eba:	16 f0       	brts	.+4      	; 0xec0 <ldexp+0x72>
     ebc:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__fp_mpack>
     ec0:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>
     ec4:	68 94       	set
     ec6:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>

00000eca <log>:
     eca:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_splitA>
     ece:	a8 f3       	brcs	.-22     	; 0xeba <ldexp+0x6c>
     ed0:	99 23       	and	r25, r25
     ed2:	c1 f3       	breq	.-16     	; 0xec4 <ldexp+0x76>
     ed4:	ae f3       	brts	.-22     	; 0xec0 <ldexp+0x72>
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	1f 93       	push	r17
     edc:	0f 93       	push	r16
     ede:	ff 92       	push	r15
     ee0:	c9 2f       	mov	r28, r25
     ee2:	dd 27       	eor	r29, r29
     ee4:	88 23       	and	r24, r24
     ee6:	2a f0       	brmi	.+10     	; 0xef2 <log+0x28>
     ee8:	21 97       	sbiw	r28, 0x01	; 1
     eea:	66 0f       	add	r22, r22
     eec:	77 1f       	adc	r23, r23
     eee:	88 1f       	adc	r24, r24
     ef0:	da f7       	brpl	.-10     	; 0xee8 <log+0x1e>
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e8       	ldi	r20, 0x80	; 128
     ef8:	5f eb       	ldi	r21, 0xBF	; 191
     efa:	9f e3       	ldi	r25, 0x3F	; 63
     efc:	88 39       	cpi	r24, 0x98	; 152
     efe:	20 f0       	brcs	.+8      	; 0xf08 <log+0x3e>
     f00:	80 3e       	cpi	r24, 0xE0	; 224
     f02:	38 f0       	brcs	.+14     	; 0xf12 <log+0x48>
     f04:	21 96       	adiw	r28, 0x01	; 1
     f06:	8f 77       	andi	r24, 0x7F	; 127
     f08:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
     f0c:	e0 ea       	ldi	r30, 0xA0	; 160
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	04 c0       	rjmp	.+8      	; 0xf1a <log+0x50>
     f12:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
     f16:	ed ec       	ldi	r30, 0xCD	; 205
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_powser>
     f1e:	8b 01       	movw	r16, r22
     f20:	be 01       	movw	r22, r28
     f22:	ec 01       	movw	r28, r24
     f24:	fb 2e       	mov	r15, r27
     f26:	6f 57       	subi	r22, 0x7F	; 127
     f28:	71 09       	sbc	r23, r1
     f2a:	75 95       	asr	r23
     f2c:	77 1f       	adc	r23, r23
     f2e:	88 0b       	sbc	r24, r24
     f30:	99 0b       	sbc	r25, r25
     f32:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__floatsisf>
     f36:	28 e1       	ldi	r18, 0x18	; 24
     f38:	32 e7       	ldi	r19, 0x72	; 114
     f3a:	41 e3       	ldi	r20, 0x31	; 49
     f3c:	5f e3       	ldi	r21, 0x3F	; 63
     f3e:	0e 94 10 06 	call	0xc20	; 0xc20 <__mulsf3x>
     f42:	af 2d       	mov	r26, r15
     f44:	98 01       	movw	r18, r16
     f46:	ae 01       	movw	r20, r28
     f48:	ff 90       	pop	r15
     f4a:	0f 91       	pop	r16
     f4c:	1f 91       	pop	r17
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__addsf3x>
     f56:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_round>

00000f5a <modf>:
     f5a:	fa 01       	movw	r30, r20
     f5c:	dc 01       	movw	r26, r24
     f5e:	aa 0f       	add	r26, r26
     f60:	bb 1f       	adc	r27, r27
     f62:	9b 01       	movw	r18, r22
     f64:	ac 01       	movw	r20, r24
     f66:	bf 57       	subi	r27, 0x7F	; 127
     f68:	28 f4       	brcc	.+10     	; 0xf74 <modf+0x1a>
     f6a:	22 27       	eor	r18, r18
     f6c:	33 27       	eor	r19, r19
     f6e:	44 27       	eor	r20, r20
     f70:	50 78       	andi	r21, 0x80	; 128
     f72:	20 c0       	rjmp	.+64     	; 0xfb4 <modf+0x5a>
     f74:	b7 51       	subi	r27, 0x17	; 23
     f76:	90 f4       	brcc	.+36     	; 0xf9c <modf+0x42>
     f78:	ab 2f       	mov	r26, r27
     f7a:	00 24       	eor	r0, r0
     f7c:	46 95       	lsr	r20
     f7e:	37 95       	ror	r19
     f80:	27 95       	ror	r18
     f82:	01 1c       	adc	r0, r1
     f84:	a3 95       	inc	r26
     f86:	d2 f3       	brmi	.-12     	; 0xf7c <modf+0x22>
     f88:	00 20       	and	r0, r0
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <modf+0x4e>
     f8c:	22 0f       	add	r18, r18
     f8e:	33 1f       	adc	r19, r19
     f90:	44 1f       	adc	r20, r20
     f92:	b3 95       	inc	r27
     f94:	da f3       	brmi	.-10     	; 0xf8c <modf+0x32>
     f96:	0e d0       	rcall	.+28     	; 0xfb4 <modf+0x5a>
     f98:	0c 94 38 04 	jmp	0x870	; 0x870 <__subsf3>
     f9c:	61 30       	cpi	r22, 0x01	; 1
     f9e:	71 05       	cpc	r23, r1
     fa0:	a0 e8       	ldi	r26, 0x80	; 128
     fa2:	8a 07       	cpc	r24, r26
     fa4:	b9 46       	sbci	r27, 0x69	; 105
     fa6:	30 f4       	brcc	.+12     	; 0xfb4 <modf+0x5a>
     fa8:	9b 01       	movw	r18, r22
     faa:	ac 01       	movw	r20, r24
     fac:	66 27       	eor	r22, r22
     fae:	77 27       	eor	r23, r23
     fb0:	88 27       	eor	r24, r24
     fb2:	90 78       	andi	r25, 0x80	; 128
     fb4:	30 96       	adiw	r30, 0x00	; 0
     fb6:	21 f0       	breq	.+8      	; 0xfc0 <modf+0x66>
     fb8:	20 83       	st	Z, r18
     fba:	31 83       	std	Z+1, r19	; 0x01
     fbc:	42 83       	std	Z+2, r20	; 0x02
     fbe:	53 83       	std	Z+3, r21	; 0x03
     fc0:	08 95       	ret

00000fc2 <__fp_mpack>:
     fc2:	9f 3f       	cpi	r25, 0xFF	; 255
     fc4:	31 f0       	breq	.+12     	; 0xfd2 <__fp_mpack_finite+0xc>

00000fc6 <__fp_mpack_finite>:
     fc6:	91 50       	subi	r25, 0x01	; 1
     fc8:	20 f4       	brcc	.+8      	; 0xfd2 <__fp_mpack_finite+0xc>
     fca:	87 95       	ror	r24
     fcc:	77 95       	ror	r23
     fce:	67 95       	ror	r22
     fd0:	b7 95       	ror	r27
     fd2:	88 0f       	add	r24, r24
     fd4:	91 1d       	adc	r25, r1
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	97 f9       	bld	r25, 7
     fdc:	08 95       	ret

00000fde <__tablejump2__>:
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	05 90       	lpm	r0, Z+
     fe4:	f4 91       	lpm	r31, Z
     fe6:	e0 2d       	mov	r30, r0
     fe8:	09 94       	ijmp

00000fea <__adddi3_s8>:
     fea:	00 24       	eor	r0, r0
     fec:	a7 fd       	sbrc	r26, 7
     fee:	00 94       	com	r0
     ff0:	2a 0f       	add	r18, r26
     ff2:	30 1d       	adc	r19, r0
     ff4:	40 1d       	adc	r20, r0
     ff6:	50 1d       	adc	r21, r0
     ff8:	60 1d       	adc	r22, r0
     ffa:	70 1d       	adc	r23, r0
     ffc:	80 1d       	adc	r24, r0
     ffe:	90 1d       	adc	r25, r0
    1000:	08 95       	ret

00001002 <__cmpdi2_s8>:
    1002:	00 24       	eor	r0, r0
    1004:	a7 fd       	sbrc	r26, 7
    1006:	00 94       	com	r0
    1008:	2a 17       	cp	r18, r26
    100a:	30 05       	cpc	r19, r0
    100c:	40 05       	cpc	r20, r0
    100e:	50 05       	cpc	r21, r0
    1010:	60 05       	cpc	r22, r0
    1012:	70 05       	cpc	r23, r0
    1014:	80 05       	cpc	r24, r0
    1016:	90 05       	cpc	r25, r0
    1018:	08 95       	ret

0000101a <_exit>:
    101a:	f8 94       	cli

0000101c <__stop_program>:
    101c:	ff cf       	rjmp	.-2      	; 0x101c <__stop_program>
